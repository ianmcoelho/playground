// Top-level build file where you can add configuration options common to all sub-projects/modules.

apply from: 'dependencies.gradle'

buildscript {
    ext.kotlin_version = '1.3.61'
    repositories {
        google()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.6.1'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "gradle.plugin.dev.arunkumar:scabbard-gradle-plugin:0.2.0"
    }
}

allprojects {
    repositories {
        google()
        jcenter()

    }
}

subprojects {
    if(name.startsWith('app')) {
        apply plugin: 'com.android.application'
    } else {
        apply plugin: 'com.android.library'
    }

    apply plugin: 'kotlin-android'
    apply plugin: 'kotlin-android-extensions'
    apply plugin: "kotlin-kapt"
    apply plugin: "scabbard.gradle"

    scabbard {
        enabled true
        fullBindingGraphValidation true
    }

    android {
        compileSdkVersion 29
        buildToolsVersion "29.0.2"

        defaultConfig {
            minSdkVersion 21
            targetSdkVersion 29
            versionCode 1
            versionName "1.0"

            testOptions {
                execution 'ANDROID_TEST_ORCHESTRATOR'
            }

            compileOptions {
                sourceCompatibility JavaVersion.VERSION_1_8
                targetCompatibility JavaVersion.VERSION_1_8
            }

            testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
            consumerProguardFiles 'consumer-rules.pro'
        }

        buildTypes {
            release {
                minifyEnabled false
                proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            }
        }

    }

    dependencies {
        implementation fileTree(dir: 'aars', include: ['*.aar, *.jar'])

        rootProject.coreContractsDependencies.each {
            add(it.configuration, it.dependency, it.options)
        }

        if (name != 'core' && name != 'core-contracts') {
            implementation project(':core')
        }

        if (name != 'core-contracts') {
            rootProject.coreDependencies.each {
                add(it.configuration, it.dependency, it.options)
            }

            rootProject.testDependencies.each {
                add(it.configuration, it.dependency, it.options)
            }

            rootProject.androidTestDependencies.each {
                add(it.configuration, it.dependency, it.options)
            }
        }

        if (name.startsWith('app')) {
            implementation project(':feature-module1')
            implementation project(':feature-module2')
            implementation project(':feature-multibinding1')
        }
    }


}

task clean(type: Delete) {
    delete rootProject.buildDir
}
